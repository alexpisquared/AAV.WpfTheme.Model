//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleDataSource
{
  using System;
  using System.ComponentModel;
  using System.Diagnostics;

  // To significantly reduce the sample data footprint in your production application, you can set
  // the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
    internal class SampleDataSource { }
#else

  public class SampleDataSource : INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
      if (this.PropertyChanged != null)
      {
        this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
      }
    }

    public SampleDataSource()
    {
      //try
      //{
      //  //Uri resourceUri = new Uri("ms-appx:../../../SampleData/SampleDataSource/SampleDataSource.xaml", UriKind.Relative); //tu: fix for SampleData missing at runtime (absolute vs relative: VS Community Edtn throws here with "cannot use absolute...")
      //  var resourceUri = new Uri(@"..\..\..\SampleData\SampleDataSource\SampleDataSource.xaml", UriKind.Relative); //tu: fix for SampleData missing at runtime (absolute vs relative)

      //  Debug.WriteLine(Environment.CurrentDirectory);

      //  System.Windows.Application.LoadComponent(this, resourceUri);
      //}
      //catch(Exception ex)
      //{
      //  Debug.WriteLine(ex);
      //}
    }

    private SampleList _SampleList = new SampleList();

    public SampleList SampleList
    {
      get
      {
        return this._SampleList;
      }
    }
  }

  public class SampleListItem : INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
      if (this.PropertyChanged != null)
      {
        this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
      }
    }

    private double _ID = 0;

    public double ID
    {
      get
      {
        return this._ID;
      }

      set
      {
        if (this._ID != value)
        {
          this._ID = value;
          this.OnPropertyChanged("ID");
        }
      }
    }

    private string _Name = string.Empty;

    public string Name
    {
      get
      {
        return this._Name;
      }

      set
      {
        if (this._Name != value)
        {
          this._Name = value;
          this.OnPropertyChanged("Name");
        }
      }
    }

    private System.Windows.Media.ImageSource _Look = null;

    public System.Windows.Media.ImageSource Look
    {
      get
      {
        return this._Look;
      }

      set
      {
        if (this._Look != value)
        {
          this._Look = value;
          this.OnPropertyChanged("Look");
        }
      }
    }

    private bool _Done = false;

    public bool Done
    {
      get
      {
        return this._Done;
      }

      set
      {
        if (this._Done != value)
        {
          this._Done = value;
          this.OnPropertyChanged("Done");
        }
      }
    }
  }

  public class SampleList : System.Collections.ObjectModel.ObservableCollection<SampleListItem>
  {
  }
#endif
}
